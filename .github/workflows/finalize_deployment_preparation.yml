name: Finalize Deployment Preparation

on:
  workflow_dispatch:
    inputs:
      release_type:
        type: choice
        options:
          - major
          - minor
          - patch
        default: patch
        required: true

env:
  preview_branch: 3.2_preview
  main_branch: 3.2_main
  next_branch: 3.2_next
  release_prep_warning_message: 'At least one "prepared release" must exist before finalizing!'
  release_candidate_warning_message: 'At least one release candidate must exist before finalizing!'


jobs:
  setup:
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ env.preview_branch }}
      - uses: actions/setup-node@v3
        with:
          node-version: 14
      - name: Checking for prepared release with candidate
        run: |
          cd public
          npm --no-git-tag-version version ${{ inputs.release_type }}
          git config user.name 'GitHub Action'
          git config user.email '<>'
          release_version=$(node -p "require('./package.json').version")
          git fetch -q
          if ! git checkout -f "release/${release_version}" ; then
            echo "::warning::${{ env.release_prep_warning_message }}"
            exit 1
          else
            git pull origin "release/${release_version}"
            if ! npm --no-git-tag-version version $release_version ; then
              echo "::warning::${{ env.release_candidate_warning_message }}"
              exit 1
            fi
          fi
          echo ::set-output name=release_version::"${release_version}"
      - name: Merging release across branches
        run: |
          release_version="${{ steps.vars.outputs.release_version }}"
          git add .
          git commit -m "Prepare ${release_version}"
          git push origin "release/${release_version}"
          gh pr edit --title "Release ${release_version}"
          gh pr merge -m "release/${release_version}"
          git switch "${{ env.preview_branch }}"
          git pull origin "${{ env.preview_branch }}"
          gh pr create --title "Release ${release_version}" --base "${{ env.main_branch }}" --fill
          gh pr merge -m "${{ env.preview_branch }}"
          git switch "${{ env.main_branch }}"
          git pull origin "${{ env.main_branch }}"
          gh pr create --title "Release ${release_version}" --base "${{ env.next_branch }}" --fill
          gh pr merge -m "${{ env.main_branch }}"

##COMMENTS##

# Increases part of package.json version number by 1, based on the 'release_type' input
# line[33] -> npm --no-git-tag-version version ${{ inputs.release_type }}

# Gets the package.json version for the preview branch and stores it in the 'new_version' bash variable to be
# compared against later. Since we're never pushing changes to this branch's package.json (just updating a PR),
# we get the correct release version for free
# line[36] -> release_version=$(node -p "require('./package.json').version")

# If we fail to checkout the release branch associated with "release_version", then no releases have been "prepped"
# and we shoud stop here and issue a warning
# line[38] -> if [ ! git checkout -f "release/${release_version}" ]

# We pull down the contents of the release branch associated with "release_version", which should update our
# package.json's version
# line[41] -> git pull origin "release/${release_version}"

# By default, the "npm version" command will throw an exception if you attempt to update the version to what
# it's already set to (e.g. trying to set the version to "1.0.0" when it's already "1.0.0"). If an exception
# is thrown, we assume that no release candidates have been created (which generally shouldn't be the case, since
# we want to make sure things work before publishing changes), stop the workflow and issue a warning
# line[42] -> if ! npm --no-git-tag-version version $release_version
