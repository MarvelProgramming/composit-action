name: Finalize Deployment Preparation

on: workflow_dispatch

env:
  preview_branch: 3.2_preview
  main_branch: 3.2_main
  next_branch: 3.2_next
  node_version: 17
  last_release_type_field_name: "deployment_workflow.last_release_type"
  last_candidate_version: "deployment_workflow.last_candidate_version"
  notification_title: 'Progress'

jobs:
  setup:
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ env.preview_branch }}
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ env.node_version }}
      - name: Configuring git
        run: |
          git config user.name 'GitHub Action'
          git config user.email '<>'
      - name: Checking for previous candidate version
        if: ${{ success() }}
        run: |
          cd public
          if [ -z "$(npm pkg get ${{ env.last_candidate_version }})" ] ; then
            echo ::error title=${{ env.notification_title }}::"Couldn't find previous candidate version! Either the prepare_release_candidate workflow was never run, or there was an issue while it was running!"
            exit 1
          fi
      - name: Setting release_version
        if: ${{ success() }}
        run: |
          cd public
          echo "release_version=$(echo $(npm pkg get ${{ env.last_candidate_version }}) | tr -d '"')" >> $GITHUB_ENV
      - name: Checking for prepared release and candidate
        if: ${{ success() }}
        id: validation
        run: |
          cd public
          git fetch -q
          
          if ! git checkout -f "release/${{ env.release_version }}" ; then
            echo ::error title=${{ env.notification_title }}::"Failed to checkout release branch!"
            exit 1
          fi
          
          git pull origin "release/${{ env.release_version }}"
          
          if ! npm --no-git-tag-version version ${{ env.release_version }} ; then
            echo ::error title=${{ env.notification_title }}::"At least one release candidate must exist before finalizing!"
            exit 1
          fi
      - name: Removing custom npm package fields
        if: ${{ success() }}
        run: |
          cd public
          npm pkg delete "deployment_workflow"
      - name: Creating tag for new release
        if: ${{ success() }}
        run: |
          git add .
          git commit -m "Prepare ${{ env.release_version }}"
          git tag "${{ env.release_version }}"
          git push origin --tags
      - name: Merging "release" branch into "preview" branch
        if: ${{ success() }}
        run: |
          git push origin "release/${{ env.release_version }}"
          
          if ! gh pr create --title "Release ${{ env.release_version }}" --base "${{ env.preview_branch }}" --body "" ; then
              echo ::error title=${{ env.notification_title }}::"Failed to create PR from 'release/${{ env.release_version }}' branch into '${{ env.preview_branch }}' branch"
              exit 1
          fi
          
          if ! gh pr merge -m "release/${{ env.release_version }}" ; then
            echo ::error title=${{ env.notification_title }}::"Failed to merge 'release/${{ env.release_version }}' branch into '${{ env.preview_branch }}'"
            exit 1
          fi
      - name: Merging "preview" branch into "main" branch
        if: ${{ success() }}
        run: |
          git switch "${{ env.preview_branch }}"
          git pull origin "${{ env.preview_branch }}"
          
          if ! gh pr create --title "Release ${{ env.release_version }}" --base "${{ env.main_branch }}" --body "" ; then
            echo ::error title=${{ env.notification_title }}::"Failed to create PR from '${{ env.preview_branch }}' branch into '${{ env.main_branch }}' branch"
            exit 1
          fi
          
          if ! gh pr merge -m "${{ env.preview_branch }}" ; then
            echo ::error title=${{ env.notification_title }}::"Failed to merge '${{ env.preview_branch }}' branch into '${{ env.main_branch }}' branch"
            exit 1
          fi
      - name: Merging "main" branch into "next" branch
        if: ${{ success() }}
        run: |  
          git switch "${{ env.main_branch }}"
          git pull origin "${{ env.main_branch }}"
          
          if ! gh pr create --title "Release ${{ env.release_version }}" --base "${{ env.next_branch }}" --body "" ; then
            echo ::error title=${{ env.notification_title }}::"Failed to create PR from '${{ env.main_branch }}' branch to '${{ env.next_branch }}' branch"
            exit 1
          fi
          
          if ! gh pr merge -m "${{ env.main_branch }}" ; then
            echo ::error title=${{ env.notification_title }}::"Failed to merge '${{ env.main_branch }}' branch into '${{ env.next_branch }}' branch"
            exit 1
          fi
      - name: Deleting release branch and fast forwarding the others
        if: ${{ success() }}
        run: |
          git push origin --delete "release/${{ env.release_version }}"
          git pull origin "${{ env.next_branch }}"
          git push origin "${{ env.main_branch }}"
          git switch "${{ env.preview_branch }}"
          git pull origin "${{ env.next_branch }}"
          git push origin "${{ env.preview_branch }}"
          
##COMMENTS##

# Gives this workflow the permissions necessary for making PRs and merging (does not override review requirement).
# >> GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

# Increases part of package.json version number by 1, based on the version part defined in the custom npm field
# created by the prepare_release_candidate workflow
# >> npm --no-git-tag-version version "$(npm pkg get ${{ env.last_release_type_field_name }})"

# If we fail to checkout the release branch associated with "release_version", then no releases have been "prepped"
# and we shoud stop here and issue an error message
# >> if ! git checkout -f "release/${release_version}"

# We pull down the contents of the release branch associated with "release_version", which should update our
# package.json's version
# >> git pull origin "release/${release_version}"

# By default, the "npm version" command will throw an exception if you attempt to update the version to what
# it's already set to (e.g. trying to set the version to "1.0.0" when it's already "1.0.0"). If an exception
# is thrown, we assume that no release candidates have been created (which shouldn't be the case, since
# we want to make sure things work before publishing changes), stop the workflow and issue an error message
# >> if ! npm --no-git-tag-version version $release_version

# Uses the $GITHUB_OUTPUT environment file to set an output named "release_version" with the value of
# the current release version, making it accessible to future steps in the workflow
# >> echo "release_version=$(echo "${release_version}")" >> $GITHUB_OUTPUT

# Gets the last candidate version from a custom npm package.json field "npm pkg get" command (which returns JSON),
# trims the quotes, and stores it in an environment output called previous_release_type. This is used to determine
# the version type to use when finalizing the release, based on what was used in the prepare_release_candidate
# workflow
# >> echo "release_version=$(echo $(npm pkg get ${{ env.last_candidate_version }}) | tr -d '"')" >> $GITHUB_ENV

# Will only execute the step if the previous one ran successfully (this is the default behavior, but it's
# better to be explicit in case that changes in the future)
# >> if: ${{ success() }}

# A convenient way to send local tags to the remote
# >> git push origin --tags

# We delete this custom npm field to clean up the package.json file and prevent finalize_deployment_preparation
# from being ran again without prepare_release_candidate being executed at least once before
# >> npm pkg delete "${{ env.last_release_type_field_name }}"

# Deletes the release candidate branch (e.g. 'release/{x.y.z}') to avoid littering the branch list
# >> git push origin --delete "${release_version}"
