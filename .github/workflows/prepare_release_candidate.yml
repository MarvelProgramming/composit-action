name: Prepare Release Candidate

on:
  workflow_dispatch:
    inputs:
      release_type:
        type: choice
        options:
          - major
          - minor
          - patch
        default: patch
        required: true

env:
  next_branch: 3.2_next
  preview_branch: 3.2_preview

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ env.next_branch }}
      - uses: actions/setup-node@v3
      - env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cd public
          npm --no-git-tag-version version ${{ inputs.release_type }}
          new_version=$(node -p "require('./package.json').version")
          git config user.name 'GitHub Action'
          git config user.email '<>'
          git checkout -fB "release/${new_version}"
          git pull origin "release/${new_version}" || echo "::Notice::No existing branch to pull from"
          npm --no-git-tag-version --preid='rc' version prerelease
          rc_version=$(node -p "require('./package.json').version")
          git add .
          git commit -m "Prepare ${rc_version}"
          git push origin "release/${new_version}"
          gh pr create --title "Prepare ${rc_version}" --body '' -B "${{ env.preview_branch }}" || gh pr edit --title "Prepare ${rc_version}"

##COMMENTS##

# Increases part of package.json version number by 1, based on the 'release_type' input
# >> npm --no-git-tag-version version ${{ inputs.release_type }}

# Gets the package.json version and stores it in the 'new_version' bash variable
# >> new_version=$(node -p "require('./package.json').version")

# Checks out to 'release/x.x.x' if it exists and resets, otherwise it makes a new branch
# >> git checkout -fB "release/${new_version}"

# Attempts to pull if a 'release/x.x.x' branch already exists, otherwise echos a message
# >> git pull origin "release/${new_version}" || echo "::Notice::No existing branch to pull from"

# Increments the 'rc' part of the package.json version by 1
# >> npm --no-git-tag-version --preid='rc' version prerelease

# Storing the updated package.json version in the 'rc_version' bash variable
# >> rc_version=$(node -p "require('./package.json').version")

# Attempts to create a new PR, otherwise edits the title of an existing one
# >> gh pr create --title "Prepare ${rc_version}" --body '' -B "${{ env.preview_branch }}" || gh pr edit --title "Prepare ${rc_version}"
