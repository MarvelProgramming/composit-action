name: Prepare Release Candidate

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: The version segment to increment (e.g. 'patch' -> '1.0.0' to '1.0.1')
        type: choice
        options:
          - major
          - minor
          - patch
        default: patch
        required: true

env:
  next_branch: 3.2_next
  preview_branch: 3.2_preview
  notification_title: 'Progress'
  last_release_type_field_name: "deployment_workflow.last_release_type"
  last_candidate_version: "deployment_workflow.last_candidate_version"
  node_version: 17

jobs:
  prepare:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ env.preview_branch }}
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ env.node_version }}
      - name: Configuring git
        run: |
          git config user.name 'GitHub Action'
          git config user.email '<>'
      - name: Changing to "next" branch
        run: |
          git fetch
          git switch "${{ env.next_branch }}"
          git pull origin "${{ env.next_branch }}"
      - name: Setting active_release_type
        run: |
          cd public
          active_release_type="$(npm pkg get ${{ env.last_release_type_field_name }} | tr -d '"')"
          
          if ${active_release_type} ; then
            echo ::notice title=${{ env.notification_title }}::"An active release candidate is using "${{ env.active_release_type }}" -- enforcing the use of "${{ env.active_release_type }}" for the release_type.."
          else
            echo ::notice title=${{ env.notification_title }}::"Setting release_type to ${{ inputs.release_type }}"
            active_release_type="${{ inputs.release_type }}"
          fi
          
          echo "active_release_type=${{ env.active_release_type }}" >> $GITHUB_ENV
      - name: Setting new_version
        run: |
          cd public
          npm --no-git-tag-version version ${{ env.active_release_type }}
          echo "new_version=$(npm pkg get version | tr -d '"')" >> $GITHUB_ENV
      - name: Setting rc_version
        run: |
          echo ::notice title=${{ env.notification_title }}::"Checking for existing release candidate"
          cd public
          git checkout -fB "release/${{ env.new_version }}"
          
          if ! git pull origin "release/${{ env.new_version }}" ; then
            echo "::notice title=${{ env.notification_title }}::No existing branch to pull from. Using current"
            npm --no-git-tag-version version --preid='rc' "pre${active_release_type}"
          else
            echo "::notice title=${{ env.notification_title }}::Pulling from existing branch."
            npm --no-git-tag-version version --preid='rc' prerelease
          fi
          
          rc_version="$(echo $(npm pkg get version) | tr -d '"')"
      - name: Setting custom npm fields
        run: |
          npm pkg set "${{ env.last_release_type_field_name }}=${active_release_type}"
          npm pkg set "${{ env.last_candidate_version }}=${new_version}"
      - name: Pushing changes and creating/editing PR
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git add .
          git commit -m "Prepare ${{ env.rc_version }}"
          git push origin "release/${{ env.new_version }}"
          echo ::notice title=${{ env.notification_title }}::"Creating PR from 'release/${{ env.new_version }}' branch to '${{ env.preview_branch }}' branch"
          if ! gh pr create --title "Prepare ${{ env.rc_version }}" --body '' --base "${{ env.preview_branch }}" ; then
            echo ::notice title=${{ env.notification_title }}::"Existing PR found, editing title instead"
            
            if ! gh pr edit --title "Prepare ${{ env.rc_version }}" ; then
              echo ::error title=${{ env.notification_title }}::"Failed to edit existing PR's title!"
            fi
          fi

##COMMENTS##

# Gets the current version of the preview branch (since this workflow starts there) using the
# "npm pkg get" command (which returns JSON) and stores it in an environment output called
# previous_release_type. This is used to prevent a developer from accidentally choosing different
# versions (i.e. major, minor, patch) throughout the preparation process
# >> echo "previous_release_type=$(npm pkg get ${{ env.last_release_type_field_name }})" >> $GITHUB_OUTPUT

# Increases part of package.json version number by 1, based on the 'release_type' input
# >> npm --no-git-tag-version version ${{ inputs.release_type }}

# Gets the package.json version using "npm pkg get version" (which returns JSON), 
# trims the quotes from the sting, and stores it in the 'new_version' bash variable
# >> new_version="$(echo $(npm pkg get version) | tr -d '"')"

# Checks out to 'release/x.x.x' if it exists and resets, otherwise it makes a new branch
# >> git checkout -fB "release/${new_version}"

# Attempts to pull 'release/x.x.x' branch, and issues a notice with a message upon failure
# >> if ! git pull origin "release/${new_version}"

# Increments the 'rc' part of the package.json version by 1
# >> npm --no-git-tag-version --preid='rc' version prerelease

# Gets the package.json version, removes the quotes from the sting using bash's parameter expansion,
# and stores it in the 'rc_version' bash variable
# >> rc_version="$(npm pkg get version)"

# Attempts to create a new PR (which will fail if one already exists) and
# edits the title of an existing pr otherwise
# >> if ! gh pr create --title "Prepare ${rc_version}" --body '' -B "${{ env.preview_branch }}"
