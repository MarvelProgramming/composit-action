name: Prepare Release Candidate

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: The version segment to increment (e.g. 'patch' -> '1.0.0' to '1.0.1')
        type: choice
        options:
          - major
          - minor
          - patch
        default: patch
        required: true

env:
  next_branch: 3.2_next
  preview_branch: 3.2_preview
  notification_title: 'Progress'
  last_release_type_field_name: 'deployment.workflow.last.release_type'
  node_version: 17

jobs:
  prepare:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ env.next_branch }}
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ env.node_version }}
      - env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo ::notice title=${{ env.notification_title }}::"Checking for existing release candidate"
          cd public
          npm --no-git-tag-version version ${{ inputs.release_type }}
          new_version="$(npm pkg get version)"
          git config user.name 'GitHub Action'
          git config user.email '<>'
          git checkout -fB "release/${new_version}"
          if ! git pull origin "release/${new_version}" ; then
            echo "::notice title=${{ env.notification_title }}::No existing branch to pull from. Using current"
            npm --no-git-tag-version version --preid='rc' "pre${{ inputs.release_type }}"
          else
            echo "::notice title=${{ env.notification_title }}::Pulling from existing branch."
            npm --no-git-tag-version version --preid='rc' prerelease
          fi
          rc_version="$(npm pkg get version)"
          npm pkg set "${{ env.last_release_type_field_name }}=${{ inputs.release_type }}"
          git add .
          git commit -m "Prepare ${rc_version}"
          git push origin "release/${new_version}"
          echo ::notice title=${{ env.notification_title }}::"Creating PR from 'release/${new_version}' branch to '${{ env.preview_branch }}' branch"
          if ! gh pr create --title "Prepare ${rc_version}" --body '' --base "${{ env.preview_branch }}" ; then
            echo ::notice title=${{ env.notification_title }}::"Existing PR found, editing instead"
            gh pr edit --title "Prepare ${rc_version}"
          fi

##COMMENTS##

# Increases part of package.json version number by 1, based on the 'release_type' input
# >> npm --no-git-tag-version version ${{ inputs.release_type }}

# Gets the package.json version and stores it in the 'new_version' bash variable
# >> new_version="$(npm pkg get version)"

# Checks out to 'release/x.x.x' if it exists and resets, otherwise it makes a new branch
# >> git checkout -fB "release/${new_version}"

# Attempts to pull 'release/x.x.x' branch, and issues a notice with a message upon failure
# >> if ! git pull origin "release/${new_version}"

# Increments the 'rc' part of the package.json version by 1
# >> npm --no-git-tag-version --preid='rc' version prerelease

# Storing the updated package.json version with the 'rc' prefix in the 'rc_version' bash variable
# >> rc_version="$(npm pkg get version)"

# Attempts to create a new PR (which will fail if one already exists) and
# edits the title of an existing pr otherwise
# >> if ! gh pr create --title "Prepare ${rc_version}" --body '' -B "${{ env.preview_branch }}"
